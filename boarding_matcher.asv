% MATLAB Script: match_csv_and_excel_string_support.m
% Matches IDs and statuses from a CSV file with IDs in an Excel file,
% then writes the updated Excel file with a new column for boarding status.

% Clear workspace and command window
clear;
clc;

% Prompt user to select the first CSV file
[file1, path1] = uigetfile('*.csv', 'Select the first CSV file (with words and IDs)');
if isequal(file1, 0)
    disp('No file selected. Exiting...');
    return;
end
file1Path = fullfile(path1, file1);

% Prompt user to select the second Excel file
[file2, path2] = uigetfile('*.xlsx', 'Select the second Excel file (with IDs)');
if isequal(file2, 0)
    disp('No file selected. Exiting...');
    return;
end
file2Path = fullfile(path2, file2);

% Read data from the CSV and Excel files
file1Data = readtable(file1Path);
disp('Data from the first CSV file loaded successfully.');
file2Data = readtable(file2Path, 'FileType', 'spreadsheet');
disp('Data from the second Excel file loaded successfully.');

% Define the words to search for
searchWords = {'Border', 'Half border', 'External'};

% Dynamically identify the column containing the words
wordColumn = [];
for col = 1:width(file1Data)
    % Convert the column to a cell array of strings for comparison
    colData = file1Data{:, col};
    if isnumeric(colData)
        colData = cellstr(num2str(colData)); % Convert numeric to strings
    elseif isdatetime(colData)
        colData = cellstr(colData); % Convert datetime to strings
    elseif isstring(colData)
        colData = cellstr(colData); % Convert strings to cell array of strings
    elseif iscell(colData) && ~iscellstr(colData)
        colData = cellfun(@num2str, colData, 'UniformOutput', false); % Convert mixed cells to strings
    elseif ischar(colData)
        colData = cellstr(colData); % Convert char array to cell array of strings
    end

    % Check if the column contains any of the search words
    if any(ismember(colData, searchWords))
        wordColumn = col;
        break;
    end
end

if isempty(wordColumn)
    error('No column containing the search words was found in the first file.');
end

% Extract rows from the first file that contain the search words
matchedRows = file1Data(ismember(file1Data{:, wordColumn}, searchWords), :); % Match on the identified column
file1IDs = matchedRows{:, 1}; % IDs are always in the first column
boardingStatuses = matchedRows{:, wordColumn}; % Corresponding boarding statuses

% Filter IDs starting with '20' and having 8 digits
pattern = '^20\d{6}$';
if isnumeric(file1IDs)
    file1IDs = cellstr(num2str(file1IDs)); % Convert numeric IDs to strings
end
validIndices = ~cellfun('isempty', regexp(file1IDs, pattern));
filteredIDs = file1IDs(validIndices);
filteredStatuses = boardingStatuses(validIndices);

% Create a new column for the second file to store the boarding status
file2Data.BoardingStatus = strings(height(file2Data), 1);

% Match IDs and assign boarding status
for i = 1:height(file2Data)
    currentID = file2Data{i, 1}; % Assuming IDs are in the 1st column
    if isnumeric(currentID)
        currentID = num2str(currentID); % Convert numeric IDs to strings
    end
    if ismember(currentID, filteredIDs)
        % Find the index of the matching ID in filteredIDs
        matchIndex = find(strcmp(currentID, filteredIDs));
        % Assign the corresponding boarding status
        file2Data.BoardingStatus(i) = filteredStatuses(matchIndex);
    end
end

% Save the updated second file as an Excel file
[~, file2Name, ~] = fileparts(file2Path);
outputFileName = fullfile(path2, [file2Name '_Updated.xlsx']);
writetable(file2Data, outputFileName, 'FileType', 'spreadsheet');
disp(['The second file has been updated and saved as: ', outputFileName]);